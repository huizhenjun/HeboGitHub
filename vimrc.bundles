filetype plugin indent off
set rtp+=~/.vim/bundle/Vundle.vim/
call vundle#begin()

" Define bundles
Plugin 'VundleVim/Vundle.vim'

Plugin 'Valloric/YouCompleteMe'
" YouCompleteMe {
" 配置默认的ycm_extra_conf.py
let g:ycm_global_ycm_extra_conf = '~/.vim/bundle/YouCompleteMe/cpp/ycm/.ycm_extra_conf.py'
let g:ycm_collect_identifiers_from_tags_files = 0
" 按;jd会跳转到定义
nnoremap <Leader>jd :YcmCompleter GoToDefinitionElseDeclaration<CR>
let g:jedi#completions_enabled = 0
" let g:ycm_enable_diagnostic_highlighting = 1
" let g:ycm_complete_in_comments = 1
let g:ycm_auto_start_csharp_server = 0
let g:ycm_auto_trigger = 1
" let g:ycm_filetype_specific_completion_to_disable = {'python': 1}
" let g:ycm_filetype_blacklist = {'python': 1}
" 打开vim时不再询问是否加载ycm_extra_conf.p配置
let g:ycm_confirm_extra_conf = 1
" 使用ctags生成的tags文件"
let g:ycm_key_list_select_completion = ['<TAB>', '<Down>']
let g:ycm_key_list_previous_completion = ['<S-TAB>', '<Up>']
" 禁止缓存匹配项，每次都重新生成匹配项
let g:ycm_cache_omnifunc = 0
" 语法关键字补全
let g:ycm_seed_identifiers_with_syntax = 1
" 直接触发自动补全
let g:ycm_key_invoke_completion = ''
" let g:ycm_server_use_vim_stdout = 1
" let g:ycm_server_keep_logfiles = 1
" let g:ycm_server_log_level = 'debug'
" }

Plugin 'artur-shaik/vim-javacomplete2'
autocmd FileType java setlocal omnifunc = javacomplete#Complete
" let g:JavaComplete_ClosingBrace = 1
" nmap <F4> <Plug>(JavaComplete-Imports-AddSmart)
" imap <F4> <Plug>(JavaComplete-Imports-AddSmart)
" nmap <F5> <Plug>(JavaComplete-Imports-Add)
" imap <F5> <Plug>(JavaComplete-Imports-Add)
" nmap <F6> <Plug>(JavaComplete-Imports-AddMissing)
" imap <F6> <Plug>(JavaComplete-Imports-AddMissing)
" nmap <F7> <Plug>(JavaComplete-Imports-RemoveUnused)
" imap <F7> <Plug>(JavaComplete-Imports-RemoveUnused)

" 快速导航类信息
Plugin 'majutsushi/tagbar'
let g:tagbar_width = 15
let g:tagbar_autofocus = 1
nmap <F3> :TagbarToggle<CR>

" 文件搜索
Plugin 'kien/ctrlp.vim'
set wildignore+=*/tmp/*,*.so,*.swp,*.zip,*.png,*.jpg,*.jpeg,*/.vim/*,*.pyc,*.log 
let g:ctrlp_custom_ignore = '\v[\/]\.$'

Plugin 'rking/ag.vim'
" Plugin 'Chun-Yang/vim-action-ag'
" Plugin 'dkprice/vim-easygrep'
" let g:EasyGrepCommand=1
" set grepprg=ag\ --nogroup\ --nocolor

" 语法检测
Plugin 'scrooloose/syntastic'
let g:syntastic_always_populate_loc_list = 0
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 1
let g:syntastic_python_checkers = ['flake8']
let g:syntastic_error_symbol = 'EE'
let g:syntastic_style_error_symbol = '>>'
let g:syntastic_style_warning_symbol = 'WW'
" let g:syntastic_ignore_files=[".*\.py$"]
" let g:syntastic_html_tidy_ignore_errors=[" proprietary attribute \"ng-"]
" let g:syntastic_enable_highlighting = 1
" set statusline+=%#warningmsg#
" set statusline+=%{SyntasticStatuslineFlag()}
" set statusline+=%*

" Plugin 'slim-template/vim-slim'
" Plugin 'thoughtbot/vim-rspec'
" Plugin 'tpope/vim-bundler'
" Plugin 'tpope/vim-endwise'

" Vim git插件
" Plugin 'tpope/vim-fugitive'
" Plugin 'tpope/vim-rails'
" Plugin 'vim-ruby/vim-ruby'
" Plugin 'vim-scripts/ctags.vim'

" 显示项目目录结构
Plugin 'scrooloose/nerdtree'
let NERDChristmasTree=0
let NERDTreeWinSize=15
let NERDTreeChDirMode=2
let NERDTreeIgnore=['\~$', '\.pyc$', '\.log$', '\.swp$']
let NERDTreeShowBookmarks=1
let NERDTreeWinPos="left"
" Automatically open a NERDTree if no files where specified
autocmd vimenter * if !argc() | NERDTree | endif
" Close vim if the only window left open is a NERDTree
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif
" Open a NERDTree
nmap <F2> :NERDTreeToggle<cr>

" 范围选择
Plugin 'terryma/vim-expand-region'

" 代码自动扩展
" Plugin 'msanders/snipmate.vim'

" Plugin 'SirVer/ultisnips'
" let g:UltiSnipsExpandTrigger = '<tab>'
" let g:UltiSnipsJumpForwardTrigger = '<tab>'
" let g:UltiSnipsJumpBackwardTrigger = '<s-tab>'

" javascript插件
Plugin 'jelera/vim-javascript-syntax'

" Vim 主题
Plugin 'altercation/vim-colors-solarized'
" solarized {
let g:solarized_contrast = 'low'
" }

" Plugin 'tomasr/molokai'
" Plugin 'croaky/vim-colors-github'
" Plugin 'xsbeats/vim-blade'

Plugin 'suan/vim-instant-markdown'
let g:instant_markdown_slow = 1

" 自动括号补全
Plugin 'Raimondi/delimitMate'
Plugin 'tpope/vim-surround'

" Plugin 'groenewege/vim-less'
" nginx文件语法高亮
Plugin 'evanmiller/nginx-vim-syntax'
" Plugin 'Lokaltog/vim-easymotion'

" 自动代码对齐
Plugin 'godlygeek/tabular'

" 匹配成对标签
Plugin 'vim-scripts/matchit.zip'

" 更改当前文件名
Plugin 'danro/rename.vim'

" golang vim plugin
Plugin 'fatih/vim-go'
Plugin 'cespare/vim-golang'
Plugin 'dgryski/vim-godef'
Plugin 'Blackrush/vim-gocode'
Plugin 'rjohnsondev/vim-compiler-go'
Plugin 'vim-jp/vim-go-extra'
autocmd FileType go compiler golang
autocmd FileType go autocmd BufWritePre <buffer> Fmt
nnoremap <Leader>gd :GoDef<CR>

" 可视化缩进
Plugin 'nathanaelkane/vim-indent-guides'
" 随 vim 自启动
let g:indent_guides_enable_on_vim_startup=1
" 从第二层开始可视化显示缩进
let g:indent_guides_start_level=2
" 色块宽度
let g:indent_guides_guide_size=1
let g:indent_guides_auto_colors = 0
autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd  guibg=red   ctermbg=3
autocmd VimEnter,Colorscheme * :hi IndentGuidesEven guibg=green ctermbg=4
" let g:indent_guides_color_change_percent = 10

" 快速加减注释
Plugin 'scrooloose/nerdcommenter'
let NERDSpaceDelims = 1
" Plugin 'vim-scripts/tComment'

" html/xml标签配对补全
" Plugin 'docunext/closetag.vim'
" let g:closetag_html_style=1
Plugin 'othree/xml.vim'
let g:xml_warn_on_duplicate_mapping = 1
let xml_use_xhtml = 1

" plugin for html and css
Plugin 'mattn/emmet-vim'
" Plugin 'othree/html5.vim'

" python used bundles
" Plugin 'vim-scripts/indentpython.vim'

" 看到折叠代码的文档字符串
Plugin 'tmhedberg/SimpylFold'
let g:SimpylFold_docstring_preview = 1

" Plugin 'nvie/vim-flake8'
" autocmd BufWritePost *.py call Flake8()
" let g:flake8_show_in_gutter = 1
" set error marker to 'EE'
" let g:flake8_error_marker = 'EE'
" set warning marker to 'WW'
" let g:flake8_warning_marker = 'WW'
" disable PyFlakes warnings
" let g:flake8_pyflake_marker = ''
" disable McCabe complexity warnings
" let g:flake8_complexity_marker = ''
" disable naming warnings
" let g:flake8_naming_marker = ''
" let g:flake8_show_in_file = 1
" to use colors defined in the colorscheme
" highlight link Flake8_Error      Error
" highlight link Flake8_Warning    WarningMsg
" let g:flake8_ignore = 'E501,W293'

" Plugin 'davidhalter/jedi-vim'
" jedi-vim {
" let g:jedi#auto_initialization = 0
" let g:jedi#auto_vim_configuration = 0
" let g:jedi#popup_select_first = 0
" let g:jedi#popup_on_dot = 0
" let g:jedi#completions_enabled = 0
" let g:jedi#completions_command = ''
" let g:jedi#show_call_signatures = '1'

" let g:jedi#goto_assignments_command = ''
" let g:jedi#goto_definitions_command = '<leader>jd'
" let g:jedi#documentation_command = ''
" let g:jedi#usages_command = ''
" let g:jedi#goto_command = ''
" let g:jedi#rename_command = ''
" }

" python语法高亮
" Plugin 'hdima/python-syntax'

" 标记出多余的空白字符
Plugin 'bitc/vim-bad-whitespace'

" 美化状态栏
" Plugin 'Lokaltog/vim-powerline'
Plugin 'vim-airline/vim-airline'
" let g:airline_powerline_fonts = 1

call vundle#end()

" call pathogen#infect()
filetype plugin indent on
syntax on
